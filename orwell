#!/usr/bin/env bash

make_config() {
    CONFIG_DIR=~/.config/orwell
    BACKUP_FILE=$CONFIG_DIR"/backup_file"
    BLACKLIST=$CONFIG_DIR"/blacklist"
    PERM_BLACKLIST=$CONFIG_DIR"/perm_blacklist"
    STATUS_FILE=$CONFIG_DIR"/status"

    [[ ! -d ~/.config ]] && mkdir ~/.config
    [[ ! -d $CONFIG_DIR ]] && mkdir $CONFIG_DIR
    [[ ! -f $BACKUP_FILE ]] && cp /etc/hosts $BACKUP_FILE
    [[ ! -f $BLACKLIST ]] && touch $BLACKLIST
    [[ ! -f $PERM_BLACKLIST ]] && touch $PERM_BLACKLIST
    [[ ! -f $STATUS_FILE ]] && echo 0 > $STATUS_FILE
}

help() {
    echo "DESCRIPTION"
    echo "  Easily block and unblock websites on MacOS."
    echo "  There are two blacklists, the togglable one (accessed using -a and -t)"
    echo "  and the permanent one (accessed using -x). The permanent one is always"
    echo "  active; the toggleable one can be enabled and disabled. Useful if you"
    echo "  want to allow some sites sometimes while always blocking others."
    echo
    echo "INFO"
    echo "  Thanks for using Orwell! (c) 2024 pilgrim_tabby."
    echo "  Source code here: https://github.com/pilgrimtabby/orwell"
    echo
    echo "OPTIONS"
    echo "  -a  Add URL(s) to the toggleable blacklist (use -t to enable/disable)."
    echo "      Usage: orwell -a <URL> <URL> ..."
    echo "      Example: orwell -a www.google.com"
    echo
    echo "  -x  Add URL(s) to the permanent blacklist."
    echo "      This list is always enforced, even if the toggleable blacklist is off."
    echo "      Usage: orwell -x <URL> <URL> ..."
    echo "      Example: orwell -x www.google.com"
    echo
    echo "  -d  Delete URL(s) from both blacklists."
    echo "      Usage: orwell -d <URL> <URL> ..."
    echo "      Example: orwell -d www.google.com"
    echo
    echo "  -e  Empty either of the blacklists."
    echo "      Usage: orwell -e blacklist   (empty toggleable blacklist)"
    echo "             orwell -e p-blacklist (empty permanent blacklist)"
    echo
    echo "  -t  Toggle toggleable blacklist status (enforced or not enforced)."
    echo
    echo "  -s  Show toggleable blacklist status (enforced or not enforced)."
    echo
    echo "  -l  List all sites on both blacklists."
    echo
    echo "  -h  Show this help message."
}

get_permission() {
    sudo -v
}

find_url_line() {
    line_no=1
    while IFS= read -r line; do
        [[ "${line:10}" == "$1" ]] && echo $line_no && return
        ((line_no++))
    done < $2
    echo -1
}

add() {
    get_permission

    url_added="false"

    for url in "$@"
    do
        orig_url="$url"
        [[ "$url" == https://* ]] && url="${url:8}"
        [[ "$url" == http://* ]] && url="${url:7}"
        [[ "$url" != www.* ]] && url="www.$url"

        url_line_no=$(find_url_line $url $BLACKLIST)
        if [[ $url_line_no -ge 0 ]]; then
            echo "Warning: $orig_url is already in blacklist."
            continue
        fi

        url_line_no=$(find_url_line $url $PERM_BLACKLIST)
        if [[ $url_line_no -ge 0 ]]; then
            echo "Warning: $orig_url is already in permanent blacklist."
            echo "Please remove it from that blacklist first."
            continue
        fi

        echo -e "127.0.0.1\t$url" >> $BLACKLIST
        echo -e "127.0.0.1\t${url:4}" >> $BLACKLIST
        echo "$orig_url added to blacklist!"
        url_added="true"
    done

    if [[ $url_added == "true" ]]; then
        status_val=`cat $STATUS_FILE`
        if [[ "$status_val" == 1 ]]; then
            block
            echo "Updated blacklist in force."
            echo "You may need to restart your browser for changes to take effect."
        fi
    fi
}

delete() {
    get_permission

    blacklist_len=`wc -c < $BLACKLIST | tr -d " "`
    p_blacklist_len=`wc -c < $PERM_BLACKLIST | tr -d " "`

    for url in "$@"
    do
        deleted_url="false"
        orig_url="$url"
        [[ "$url" == https://* ]] && url="${url:8}"
        [[ "$url" == http://* ]] && url="${url:7}"
        [[ "$url" != www.* ]] && url="www.$url"

        url_line_no=$(find_url_line $url $BLACKLIST)
        if [[ $url_line_no -ge 0 ]]; then
            sed -i "" "${url_line_no},$(( $url_line_no + 1 ))d" $BLACKLIST
            echo "$orig_url removed from blacklist!"
            deleted_url="true"
        fi

        url_line_no=$(find_url_line $url $PERM_BLACKLIST)
        if [[ $url_line_no -ge 0 ]]; then
            sed -i "" "${url_line_no},$(( $url_line_no + 1 ))d" $PERM_BLACKLIST
            echo "$orig_url removed from permanent blacklist!"
            deleted_url="true"
        fi

        [[ $deleted_url == "false" ]] && echo "Warning: URL not found."
    done

    blacklist_len_new=`wc -c < $BLACKLIST | tr -d " "`
    p_blacklist_len_new=`wc -c < $PERM_BLACKLIST | tr -d " "`
    blacklist_diff=$(( $blacklist_len_new - $blacklist_len ))
    p_blacklist_diff=$(( $p_blacklist_len_new - $p_blacklist_len ))
    status_val=`cat $STATUS_FILE`

    if [[ $status_val == 1 && $blacklist_diff != 0 ]] || [[ $p_blacklist_diff != 0 ]]; then
        block
        echo "Updated blacklist in force."
        echo "You may need to restart your browser for changes to take effect."
    fi
}

list() {
    blacklist_len=`wc -c < $BLACKLIST | tr -d " "`
    p_blacklist_len=`wc -c < $PERM_BLACKLIST | tr -d " "`

    echo "Blacklist:"
    if [[ $blacklist_len == 0 ]]; then
        echo "  Empty"
    else
        index=0
        while IFS= read -r line; do
            [[ $(( $index % 2 )) == 1 ]] && echo "  ${line:10}"
            ((index++))
        done < $BLACKLIST
    fi

    echo "Permanent blacklist:"
    if [[ $p_blacklist_len == 0 ]]; then
        echo "  Empty"
    else
        index=0
        while IFS= read -r line; do
            [[ $(( index % 2 )) == 1 ]] && echo "  ${line:10}"
            ((index++))
        done < $PERM_BLACKLIST
    fi
}

toggle() {
    get_permission

    status_val=`cat $STATUS_FILE`
    if [[ "$status_val" == 0 ]]; then
        block
        echo "Blacklist is being enforced!"
    else
        unblock
        echo "Blacklist has been turned off."
    fi
}

flush_DNS() {
    get_permission

    sys_version_full=`sw_vers -productVersion`
    sys_version_plain=${sys_version_full:0:2}
    [[ $sys_version_plain == *.* ]] && sys_version_plain=9

    # This command only necessary on Big Sur and newer
    [[ $sys_version_plain > 10 ]] && sudo dscacheutil -flushcache

    sudo killall -HUP mDNSResponder
}

block() {
    tmp_file=$CONFIG_DIR"/tmp"
    awk "/# Orwell config/{exit}1" /etc/hosts > $tmp_file

    echo "# Orwell config -- do not alter anything beyond this point" >> $tmp_file
    while IFS= read -r line; do
        echo "$line"
    done < $BLACKLIST >> $tmp_file
    while IFS= read -r line; do
        echo "$line"
    done < $PERM_BLACKLIST >> $tmp_file

    sudo cp $tmp_file /etc/hosts
    rm $tmp_file

    flush_DNS
    echo 1 > $STATUS_FILE
}

unblock() {
    tmp_file=$CONFIG_DIR"/tmp"
    awk "/# Orwell config/{exit}1" /etc/hosts > $tmp_file

    echo "# Orwell config -- do not alter anything beyond this point" >> $tmp_file
    while IFS= read -r line; do
        echo "$line"
    done < $PERM_BLACKLIST >> $tmp_file
    
    sudo cp $tmp_file /etc/hosts
    rm $tmp_file

    flush_DNS
    echo 0 > $STATUS_FILE
}

show_status() {
    status_val=`cat $STATUS_FILE`
    if [[ "$status_val" == 0 ]]; then
        echo "Not enforced"
    else
        echo "Enforced."
        echo "If sites are still loading, try restarting your internet browser."
    fi
}

permanent_add() {
    get_permission

    url_added="false"

    for url in "$@"
    do
        orig_url="$url"
        [[ "$url" == https://* ]] && url="${url:8}"
        [[ "$url" == http://* ]] && url="${url:7}"
        [[ "$url" != www.* ]] && url="www.$url"

        url_line_no=$(find_url_line $url $BLACKLIST)
        if [[ $url_line_no -ge 0 ]]; then
            echo "Warning: $orig_url is already in toggleable blacklist."
            echo "Please remove it from that blacklist first."
            continue
        fi

        url_line_no=$(find_url_line $url $PERM_BLACKLIST)
        if [[ $url_line_no -ge 0 ]]; then
            echo "Warning: $orig_url is already in permanent blacklist."
            continue
        fi

        echo -e "127.0.0.1\t$url" >> $PERM_BLACKLIST
        echo -e "127.0.0.1\t${url:4}" >> $PERM_BLACKLIST
        echo "$orig_url added to permanent blacklist!"
        url_added="true"
    done

    if [[ $url_added == "true" ]]; then
        block
        echo "Updated permanent blacklist in force."
        echo "You may need to restart your browser for changes to take effect."
    fi
}

empty() {
    if [[ $1 == "blacklist" ]]; then
        > $BLACKLIST
        status_val=`cat $STATUS_FILE`
        if [[ "$status_val" == 1 ]]; then
            block
        fi
        echo "Blacklist has been emptied!"

    elif [[ $1 == "p-blacklist" ]]; then
        > $PERM_BLACKLIST
        status_val=`cat $STATUS_FILE`
        if [[ "$status_val" == 1 ]]; then
            block
        fi
        echo "Permanent blacklist has been emptied!"
        
    else
        echo "Error: argument must be 'blacklist' or 'p-blacklist'."
    fi
}

main() {
    if [[ "$1" != -* ]]; then
        help
        exit
    fi

    make_config

    optspec="a:x:d:e:tslh"
    while getopts "$optspec" optchar
    do
        case "${optchar}" in
            a)
                add "${@:2}"
                ;;
            x)
                permanent_add "${@:2}"
                ;;
            d)
                delete "${@:2}"
                ;;
            e)
                empty "$2"
                ;;
            t)
                toggle
                ;;
            s)
                show_status
                ;;
            l)
                list
                ;;
            h)
                help
                ;;
            *)
                echo "Type orwell -h for help."
                ;;
        esac
    done
}



main $@
