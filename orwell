#!/usr/bin/env bash

make_config() {
    [[ ! -d ~/.config ]] && mkdir ~/.config
    [[ ! -d $CONFIG_DIR ]] && mkdir $CONFIG_DIR
    [[ ! -f $BACKUP_FILE ]] && cp /etc/hosts $BACKUP_FILE
    [[ ! -f $BLACKLIST ]] && touch $BLACKLIST
    [[ ! -f $STATUS_FILE ]] && echo 0 > $STATUS_FILE
    [[ ! -f $PERM_BLACKLIST ]] && touch $PERM_BLACKLIST
}

help() {
    echo "DESCRIPTION"
    echo "  Easily block and unblock websites on MacOS."
    echo "  There are two blacklists, the togglable one (accessed using -a and -t)"
    echo "  and the permanent one (accessed using -x). The permanent one is always"
    echo "  active; the toggleable one can be enabled and disabled. Useful if you"
    echo "  want to allow some sites sometimes while always blocking others."
    echo
    echo "INFO"
    echo "  Thanks for using Orwell! (c) 2024 pilgrim_tabby."
    echo "  Source code here: https://github.com/pilgrimtabby/orwell"
    echo
    echo "OPTIONS"
    echo "  -a  Add URL(s) to the toggleable blacklist (use -t to enable/disable)."
    echo "      Usage: orwell -a <URL> <URL> ..."
    echo "      Example: orwell -a www.google.com"
    echo
    echo "  -x  Add URL(s) to the permanent blacklist."
    echo "      This list is always enforced, even if the toggleable blacklist is off."
    echo "      Usage: orwell -x <URL> <URL> ..."
    echo "      Example: orwell -x www.google.com"
    echo
    echo "  -d  Delete URL(s) from both blacklists."
    echo "      Usage: orwell -d <URL> <URL> ..."
    echo "      Example: orwell -d www.google.com"
    echo
    echo "  -e  Empty either of the blacklists."
    echo "      Usage: orwell -e blacklist   (empty toggleable blacklist)"
    echo "             orwell -e p-blacklist (empty permanent blacklist)"
    echo
    echo "  -t  Toggle toggleable blacklist status (enforced or not enforced)."
    echo
    echo "  -s  Show toggleable blacklist status (enforced or not enforced)."
    echo
    echo "  -l  List all sites on both blacklists."
    echo
    echo "  -h  Show this help message."
}

get_permission() {
    sudo -v
}

add() {
    get_permission

    added_url="false"
    current_blacklist=`cat $BLACKLIST`

    for var in "$@"
    do
        if [[ "$current_blacklist" == *"$var"* ]]; then
            echo "$var already in blacklist"
        elif [[ "$var" == www.*.* ]]; then
            echo -e "127.0.0.1\t$var" >> $BLACKLIST
            echo "$var added to blacklist!"
            added_url="true"
        else
            echo "Warning: $var not added. Start with www and end with domain (like www.google.com)"
        fi
    done

    if [[ $added_url == "true" ]]; then
        status_val=`cat $STATUS_FILE`
        if [[ "$status_val" == 1 ]]; then
            block
            echo "Updated blacklist in force."
            echo "You may need to restart your browser for changes to take effect."
        fi
    fi
}

delete() {
    get_permission

    deleted_basic_url="false"
    deleted_perm_url="false"
    current_blacklist=`cat $BLACKLIST`
    perm_blacklist=`cat $PERM_BLACKLIST`

    for var in "$@"
    do
        if [[ "$current_blacklist" == *"$var"* ]]; then
            sed -i "" "/$var/d" $BLACKLIST
            echo "$var removed from blacklist!"
            deleted_basic_url="true"
        elif [[ $perm_blacklist == *"$var"* ]]; then
            sed -i "" "/$var/d" $PERM_BLACKLIST
            echo "$var removed from permanent blacklist!"
            deleted_perm_url="true"
        else
            echo "Warning: $var not in either blacklist, was not deleted"
        fi
    done

    if [[ "$deleted_basic_url" == "true" ]] || [[ "$deleted_perm_url" == "true" ]]; then
        status_val=`cat $STATUS_FILE`
        if [[ "$status_val" == 1 ]] || [[ "$deleted_perm_url" == "true" ]]; then
            block
            echo "Updated blacklist in force."
            echo "You may need to restart your browser for changes to take effect."
        fi
    fi
}

list() {
    current_blacklist=`cat $BLACKLIST`
    current_perm_blacklist=`cat $PERM_BLACKLIST`
    blacklist_len=${#current_blacklist}
    perm_blacklist_len=${#current_perm_blacklist}

    echo "Blacklist:"
    if [[ $blacklist_len == 0 ]]; then
        echo "  Empty"
    else
        while IFS= read -r line; do
            echo "  ${line:10}"
        done < $BLACKLIST
    fi

    echo "Permanent blacklist:"
    if [[ $perm_blacklist_len == 0 ]]; then
        echo "  Empty"
    else
        while IFS= read -r line; do
            echo "  ${line:10}"
        done < $PERM_BLACKLIST
    fi
}

toggle() {
    get_permission

    status_val=`cat $STATUS_FILE`
    if [[ "$status_val" == 0 ]]; then
        block
        echo "Blacklist is being enforced!"
    else
        unblock
        echo "Blacklist has been turned off."
    fi
}

flush_DNS() {
    sys_version_full=`sw_vers -productVersion`
    sys_version_plain=${sys_version_full:0:2}

    [[ $sys_version_plain > 10 ]] && sudo dscacheutil -flushcache
    sudo killall -HUP mDNSResponder
}

block() {
    tmp_file=$CONFIG_DIR"/tmp"
    awk "/# Orwell config/{exit}1" /etc/hosts > $tmp_file

    echo "# Orwell config -- do not alter anything beyond this point" >> $tmp_file
    while IFS= read -r line; do
        echo "$line"
    done < $BLACKLIST >> $tmp_file
    while IFS= read -r line; do
        echo "$line"
    done < $PERM_BLACKLIST >> $tmp_file

    sudo cp $tmp_file /etc/hosts

    rm $tmp_file
    flush_DNS
    echo 1 > $STATUS_FILE
}

unblock() {
    tmp_file=$CONFIG_DIR"/tmp"
    awk "/# Orwell config/{exit}1" /etc/hosts > $tmp_file

    echo "# Orwell config -- do not alter anything beyond this point" >> $tmp_file
    while IFS= read -r line; do
        echo "$line"
    done < $PERM_BLACKLIST >> $tmp_file
    sudo cp $tmp_file /etc/hosts

    flush_DNS
    echo 0 > $STATUS_FILE
}

show_status() {
    status_val=`cat $STATUS_FILE`
    if [[ "$status_val" == 0 ]]; then
        echo "Not enforced"
    else
        echo "Enforced."
        echo "If sites are still loading, try restarting your internet browser."
    fi
}

permanent_add() {
    get_permission

    added_url="false"
    current_blacklist=`cat $PERM_BLACKLIST`

    for var in "$@"
    do
        if [[ "$current_blacklist" == *"$var"* ]]; then
            echo "$var already in permanent blacklist"
        elif [[ "$var" == www.*.* ]]; then
            echo -e "127.0.0.1\t$var" >> $PERM_BLACKLIST
            echo "$var added to permanent blacklist!"
            added_url="true"
        else
            echo "Warning: $var not added. Start with www and end with domain (like www.google.com)"
        fi
    done

    if [[ $added_url == "true" ]]; then
        block
        echo "Updated permanent blacklist in force."
        echo "You may need to restart your browser for changes to take effect."
    fi
}

empty() {
    if [[ $1 == "blacklist" ]]; then
        > $BLACKLIST
        status_val=`cat $STATUS_FILE`
        if [[ "$status_val" == 1 ]]; then
            unblock
        fi
        echo "Blacklist has been emptied!"
    elif [[ $1 == "p-blacklist" ]]; then
        > $PERM_BLACKLIST
        status_val=`cat $STATUS_FILE`
        if [[ "$status_val" == 1 ]]; then
            unblock
        fi
        echo "Permanent blacklist has been emptied!"
    else
        echo "Error: argument must be blacklist or p-blacklist."
    fi
}

main() {
    if [[ "$1" != -* ]]; then
        help
        exit
    fi

    CONFIG_DIR=~/.config/orwell
    BACKUP_FILE=$CONFIG_DIR"/backup_file"
    BLACKLIST=$CONFIG_DIR"/blacklist"
    PERM_BLACKLIST=$CONFIG_DIR"/perm_blacklist"
    STATUS_FILE=$CONFIG_DIR"/status"

    make_config

    optspec="a:x:d:e:tsl"
    while getopts "$optspec" optchar
    do
        case "${optchar}" in
            a)
                add "${@:2}"
                ;;
            x)
                permanent_add "${@:2}"
                ;;
            d)
                delete "${@:2}"
                ;;
            e)
                empty $2
                ;;
            t)
                toggle
                ;;
            s)
                show_status
                ;;
            l)
                list
                ;;
            *)
                help
                ;;
        esac
    done
}



main $@
